{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet AdminDashboardComponent = class AdminDashboardComponent {\n  constructor(courseService) {\n    this.courseService = courseService;\n    this.courses = [];\n    this.editCourse = {\n      id: 0,\n      title: '',\n      imageUrl: '',\n      price: 0\n    };\n  }\n  ngOnInit() {\n    this.loadCourses();\n  }\n  loadCourses() {\n    this.courseService.getAllCourses().subscribe(data => {\n      this.courses = data;\n    });\n  }\n  addCourse() {\n    // Check if form is valid before submitting\n    if (this.editCourse.title && this.editCourse.price > 0) {\n      this.courseService.addCourse(this.editCourse).subscribe(() => {\n        this.loadCourses();\n        this.editCourse = {\n          id: 0,\n          title: '',\n          imageUrl: '',\n          price: 0\n        }; // Reset the form\n      });\n    }\n  }\n\n  updateCourse(id, course) {\n    this.courseService.updateCourse(id, course).subscribe(() => {\n      this.loadCourses();\n      this.editCourse = {\n        id: 0,\n        title: '',\n        imageUrl: '',\n        price: 0\n      }; // Reset the form\n    });\n  }\n\n  deleteCourse(id) {\n    this.courseService.deleteCourse(id).subscribe(() => {\n      this.loadCourses();\n    });\n  }\n  setEditCourse(course) {\n    this.editCourse = {\n      ...course\n    }; // Copy course details to the edit form\n  }\n\n  onImageSelected(event) {\n    const fileInput = event.target;\n    if (fileInput?.files?.length) {\n      const file = fileInput.files[0];\n      const reader = new FileReader();\n      reader.onload = e => {\n        this.editCourse.imageUrl = e.target.result; // Save base64 image data\n      };\n\n      reader.readAsDataURL(file); // Convert the image to a base64 string\n    }\n  }\n};\n\nAdminDashboardComponent = __decorate([Component({\n  selector: 'app-admin-dashboard',\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.scss']\n})], AdminDashboardComponent);\nexport { AdminDashboardComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,IAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EASlCC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;IARjC,YAAO,GAAa,EAAE;IACtB,eAAU,GAAW;MACnBC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE;KACR;EAEkD;EAEnDC,QAAQ;IACN,IAAI,CAACC,WAAW,EAAE;EACpB;EAEAA,WAAW;IACT,IAAI,CAACN,aAAa,CAACO,aAAa,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAI;MACpD,IAAI,CAACC,OAAO,GAAGD,IAAI;IACrB,CAAC,CAAC;EACJ;EAEAE,SAAS;IACP;IACA,IAAI,IAAI,CAACC,UAAU,CAACV,KAAK,IAAI,IAAI,CAACU,UAAU,CAACR,KAAK,GAAG,CAAC,EAAE;MACtD,IAAI,CAACJ,aAAa,CAACW,SAAS,CAAC,IAAI,CAACC,UAAU,CAAC,CAACJ,SAAS,CAAC,MAAK;QAC3D,IAAI,CAACF,WAAW,EAAE;QAClB,IAAI,CAACM,UAAU,GAAG;UAAEX,EAAE,EAAE,CAAC;UAAEC,KAAK,EAAE,EAAE;UAAEC,QAAQ,EAAE,EAAE;UAAEC,KAAK,EAAE;QAAC,CAAE,CAAC,CAAC;MAClE,CAAC,CAAC;;EAEN;;EAEAS,YAAY,CAACZ,EAAU,EAAEa,MAAc;IACrC,IAAI,CAACd,aAAa,CAACa,YAAY,CAACZ,EAAE,EAAEa,MAAM,CAAC,CAACN,SAAS,CAAC,MAAK;MACzD,IAAI,CAACF,WAAW,EAAE;MAClB,IAAI,CAACM,UAAU,GAAG;QAAEX,EAAE,EAAE,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,QAAQ,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAC,CAAE,CAAC,CAAC;IAClE,CAAC,CAAC;EACJ;;EAEAW,YAAY,CAACd,EAAU;IACrB,IAAI,CAACD,aAAa,CAACe,YAAY,CAACd,EAAE,CAAC,CAACO,SAAS,CAAC,MAAK;MACjD,IAAI,CAACF,WAAW,EAAE;IACpB,CAAC,CAAC;EACJ;EAEAU,aAAa,CAACF,MAAc;IAC1B,IAAI,CAACF,UAAU,GAAG;MAAE,GAAGE;IAAM,CAAE,CAAC,CAAC;EACnC;;EAEAG,eAAe,CAACC,KAAY;IAC1B,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAA0B;IAClD,IAAID,SAAS,EAAEE,KAAK,EAAEC,MAAM,EAAE;MAC5B,MAAMC,IAAI,GAAGJ,SAAS,CAACE,KAAK,CAAC,CAAC,CAAC;MAC/B,MAAMG,MAAM,GAAG,IAAIC,UAAU,EAAE;MAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAM,IAAI;QACzB,IAAI,CAACf,UAAU,CAACT,QAAQ,GAAGwB,CAAC,CAACP,MAAM,CAACQ,MAAM,CAAC,CAAC;MAC9C,CAAC;;MACDJ,MAAM,CAACK,aAAa,CAACN,IAAI,CAAC,CAAC,CAAC;;EAEhC;CACD;;AA3DYzB,uBAAuB,eALnCD,SAAS,CAAC;EACTiC,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,kCAAkC;CAC/C,CAAC,GACWlC,uBAAuB,CA2DnC;SA3DYA,uBAAuB","names":["Component","AdminDashboardComponent","constructor","courseService","id","title","imageUrl","price","ngOnInit","loadCourses","getAllCourses","subscribe","data","courses","addCourse","editCourse","updateCourse","course","deleteCourse","setEditCourse","onImageSelected","event","fileInput","target","files","length","file","reader","FileReader","onload","e","result","readAsDataURL","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\LENOVO\\Desktop\\BridgeFront\\qantra\\src\\app\\components\\admin-dashboard\\admin-dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CourseService, Course } from '../../services/course.service';\r\n\r\n@Component({\r\n  selector: 'app-admin-dashboard',\r\n  templateUrl: './admin-dashboard.component.html',\r\n  styleUrls: ['./admin-dashboard.component.scss'],\r\n})\r\nexport class AdminDashboardComponent implements OnInit {\r\n  courses: Course[] = [];\r\n  editCourse: Course = {\r\n    id: 0,\r\n    title: '',\r\n    imageUrl: '',\r\n    price: 0,\r\n  };\r\n\r\n  constructor(private courseService: CourseService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadCourses();\r\n  }\r\n\r\n  loadCourses(): void {\r\n    this.courseService.getAllCourses().subscribe((data) => {\r\n      this.courses = data;\r\n    });\r\n  }\r\n\r\n  addCourse(): void {\r\n    // Check if form is valid before submitting\r\n    if (this.editCourse.title && this.editCourse.price > 0) {\r\n      this.courseService.addCourse(this.editCourse).subscribe(() => {\r\n        this.loadCourses();\r\n        this.editCourse = { id: 0, title: '', imageUrl: '', price: 0 }; // Reset the form\r\n      });\r\n    }\r\n  }\r\n\r\n  updateCourse(id: number, course: Course): void {\r\n    this.courseService.updateCourse(id, course).subscribe(() => {\r\n      this.loadCourses();\r\n      this.editCourse = { id: 0, title: '', imageUrl: '', price: 0 }; // Reset the form\r\n    });\r\n  }\r\n\r\n  deleteCourse(id: number): void {\r\n    this.courseService.deleteCourse(id).subscribe(() => {\r\n      this.loadCourses();\r\n    });\r\n  }\r\n\r\n  setEditCourse(course: Course): void {\r\n    this.editCourse = { ...course }; // Copy course details to the edit form\r\n  }\r\n\r\n  onImageSelected(event: Event): void {\r\n    const fileInput = event.target as HTMLInputElement;\r\n    if (fileInput?.files?.length) {\r\n      const file = fileInput.files[0];\r\n      const reader = new FileReader();\r\n      reader.onload = (e: any) => {\r\n        this.editCourse.imageUrl = e.target.result; // Save base64 image data\r\n      };\r\n      reader.readAsDataURL(file); // Convert the image to a base64 string\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}